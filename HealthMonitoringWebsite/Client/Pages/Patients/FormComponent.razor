<EditForm Model="@patient" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Name: </label>
			<div>
				<InputText @bind-Value="@patient.PatientName" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientName)" />
			</div>
		</div>

		<div class="form-group">
			<label>Date of Birth: </label>
			<div>
				<InputDate @bind-Value="@patient.PatientDateOfBirth" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientDateOfBirth)" />
			</div>
		</div>

		<div class="form-group">
			<label>Gender: </label>
			<div>
				<InputSelect @bind-Value="patient.PatientGender" class="form-control">
					<option value="">-- Select Gender --</option>
					<option value="@patient.PatientGender">Male</option>
					<option value="@patient.PatientGender">Female</option>
				</InputSelect>
				<ValidationMessage For="@(() => patient.PatientGender)" />
			</div>
		</div>

		<div class="form-group">
			<label>NRIC: </label>
			<div>
				<InputText @bind-Value="@patient.PatientNRIC" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientNRIC)" />
			</div>
		</div>

		<div class="form-group">
			<label>Family History: </label>
			<div>
				<InputText @bind-Value="@patient.PatientFamilyHistory" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientFamilyHistory)" />
			</div>
		</div>

		<div class="form-group">
			<label>Allergies: </label>
			<div>
				<InputText @bind-Value="@patient.PatientAllergies" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientAllergies)" />
			</div>
		</div>

		<div class="form-group">
			<label>Blood Type: </label>
			<div>
				<InputSelect @bind-Value="patient.PatientBloodType" class="form-control">
					<option value="">-- Select Role --</option>
					<option value="@patient.PatientBloodType">A+</option>
					<option value="@patient.PatientBloodType">A-</option>
					<option value="@patient.PatientBloodType">B+</option>
					<option value="@patient.PatientBloodType">B-</option>
					<option value="@patient.PatientBloodType">O+</option>
					<option value="@patient.PatientBloodType">O-</option>
				</InputSelect>
				<ValidationMessage For="@(() => patient.PatientBloodType)" />
			</div>
		</div>

		<div class="form-group">
			<label>Address: </label>
			<div>
				<InputText @bind-Value="@patient.PatientAddress" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientAddress)" />
			</div>
		</div>

		<div class="form-group">
			<label>Contact Number: </label>
			<div>
				<InputText @bind-Value="@patient.PatientContactNumber" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientContactNumber)" />
			</div>
		</div>

		<div class="form-group">
			<label>Emergency Contact: </label>
			<div>
				<InputText @bind-Value="@patient.PatientEmergencyContact" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientEmergencyContact)" />
			</div>
		</div>

		<div class="form-group">
			<label>Email: </label>
			<div>
				<InputText @bind-Value="@patient.Email" class="form-control" />
				<ValidationMessage For="@(() => patient.Email)" />
			</div>
		</div>

@* 		<div class="form-group">
			<label>Password: </label>
			<div>
				<InputText @bind-Value="@patient.PatientEmergencyContact" class="form-control" />
				<ValidationMessage For="@(() => patient.PatientEmergencyContact)" />
			</div>
		</div> *@
		<br />
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}

	<BackToList Target="patients" />

</EditForm>

@code {
	[Parameter] public Patient? patient { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	[Parameter] public bool Disabled { get; set; } = false;

	[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userName = state.User?.Identity?.Name;

		if (state.User?.Identity?.IsAuthenticated ?? false)
		{
			patient.Email = userName;
			patient.PatientDateOfBirth = DateTime.Now;

			if (!string.IsNullOrEmpty(userName) && patient != null)
			{
				// Set the patient's email here
				patient.Email = patient.Email;
			}
		}
	}

}