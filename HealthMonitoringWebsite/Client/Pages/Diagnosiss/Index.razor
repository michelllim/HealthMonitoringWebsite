@implements IDisposable
@page "/diagnosiss/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor


<h3 class="card-title">Diagnoses</h3>
<br />
@if (userIsAdmin || userIsStaff)
{
	<a href="/diagnosiss/create/" class="btn btn-secondary">
		<span class="oi oi-plus"></span>
		Create New Diagnosis
	</a>
}
<br />
<a class="nav-link">
	<img style="width: 800px; height: 200px; left: 400px; top: 0px; position: absolute" src="img/Diagnosis.png" />
</a>
<br />

@if (Diagnosiss == null)
{
	<div class="alert alert-info">Loading Diagnoses...</div>
}
else
{
	<table class="table table-responsive" id="diagnosissTable">
		<thead>
			<tr>
				<th>DiagnosisID</th>
				<th>Date</th>
				<th>Time</th>
				<th>Body Part</th>
				<th>Symptoms</th>
				<th>Conditions</th>
				<th>ConsultationID</th>
				@if (userIsAdmin || userIsStaff)
				{
					<th>Actions</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var diagnosis in Diagnosiss)
			{
				<tr>
					<td>@diagnosis.Id</td>
					<td>@diagnosis.DiagnosisDate</td>
					<td>@diagnosis.DiagnosisTime</td>
					<td>@diagnosis.BodyPart</td>
					<td>@diagnosis.Symptoms</td>
					<td>@diagnosis.Conditions</td>
					<td>@diagnosis.ConsultationID</td>
					@if (userIsAdmin || userIsStaff)
					{
						<td>
							<a href="/diagnosiss/view/@diagnosis.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
							</a>
							<a href="/diagnosiss/edit/@diagnosis.Id" class="btn btn-warning">
								<span class="oi oi-pencil"></span>
							</a>
							<button class="btn btn-danger" @onclick="@(()=>Delete(diagnosis.Id))">
								<span class="oi oi-delete"></span>
							</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

@code {
	
	private List<Diagnosis>? Diagnosiss;

	[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

	private bool userIsAdmin = false;
	private bool userIsStaff = false;
	private bool userIsUser = false;
	

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Diagnosiss = await _client.GetFromJsonAsync<List<Diagnosis>>($"{Endpoints.DiagnosissEndpoint}");
		
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userName = state.User?.Identity?.Name;
		if (state.User?.Identity?.IsAuthenticated ?? false)
		{
			if (userName.EndsWith("@admin.vitalmed.com", StringComparison.OrdinalIgnoreCase))
			{
				userIsAdmin = true;
			}
			else if (userName.EndsWith("@staff.vitalmed.com", StringComparison.OrdinalIgnoreCase))
			{
				userIsStaff = true;
			}
			else
			{
				userIsUser = true;
			}
		}
	}

	async Task Delete(int diagnosisId)
	{
		if (Diagnosiss != null)
		{
			var Diagnosis = Diagnosiss.First(q => q.Id == diagnosisId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Diagnosis.DiagnosisID}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.DiagnosissEndpoint}/{diagnosisId}");
				await OnInitializedAsync();
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#diagnosissTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#diagnosissTable");
	}


}
