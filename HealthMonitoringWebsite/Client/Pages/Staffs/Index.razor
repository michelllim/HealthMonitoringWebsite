@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Staffs</h3>
<br />

<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staffs
</a>
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading Staffs...</div>
}

else
{
    <table class="table table-responsive" id="staffsTable">
        <thead>
            <tr>
                <th>StaffId</th>
                <th>Name</th>
                <th>Contact Number</th>
                <th>Role</th>
                <th>Specialisation</th>
                <th>Email</th>
                @* <th>Password</th> *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var staff in Staffs)
            {
                <tr>
                    <td>@staff.StaffID</td>
                    <td>@staff.StaffName</td>
                    <td>@staff.StaffContactNumber</td>
                    <td>@staff.StaffRole</td>
                    <td>@staff.StaffSpecialization</td>
                    <td>@staff.Email</td>
                    @* <td>@staff.Password</td> *@

                    <td>
                        <a href="/staffs/view/@staff.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@staff.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(staff.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    // protected async override Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
    // }

    // public void Dispose()
    // {
    //     js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
    // }

    async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var Staff = Staffs.First(q => q.Id == staffId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Staff.StaffName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                await OnInitializedAsync();
            }
        }
    }
        /*
        public void Dispose()
            {
            _interceptor.DisposeEvent();
            }
    */

}