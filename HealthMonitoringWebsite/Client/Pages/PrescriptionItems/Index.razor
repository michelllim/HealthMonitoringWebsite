@implements IDisposable
@page "/prescriptionItems/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor



<h3 class="card-title">Prescription Items</h3>
<br />
@if (userIsAdmin || userIsStaff)
{
	<a href="/prescriptionItems/create/" class="btn btn-secondary">
		<span class="oi oi-plus"></span>
		Create New Prescription Item
	</a>
}
<br />
<a class="nav-link">
	<img style="width: 800px; height: 200px; left: 400px; top: 0px; position: absolute" src="img/prescriptionItems.png" />
</a>
<br />

@if (PrescriptionItems == null)
{
	<div class="alert alert-info">Loading Prescription Items...</div>
}
else
{
	<table class="table table-responsive" id="pItemsTable">
		<thead>
			<tr>
				<th>PrecriptionItemID</th>
				<th>Dosage</th>
				<th>Duration</th>
				<th>Refill</th>
				<th>PrescriptionID</th>
				<th>Medicine ID</th>
				@if (userIsAdmin || userIsStaff)
				{
					<th>Actions</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var prescriptionItem in PrescriptionItems)
			{
				<tr>
					<td>@prescriptionItem.Id</td>
					<td>@prescriptionItem.PDosage</td>
					<td>@prescriptionItem.PDuration</td>
					<td>@prescriptionItem.PRefill</td>
					<td>@prescriptionItem.PrescriptionID</td>
					<td>@prescriptionItem.MedicineID</td>
					@if (userIsAdmin || userIsStaff)
					{
						<td>
							<a href="/prescriptionItems/view/@prescriptionItem.Id" class="btn btn-primary">
								<span class="oi oi-book"></span>
							</a>
							<a href="/prescriptionItems/edit/@prescriptionItem.Id" class="btn btn-warning">
								<span class="oi oi-pencil"></span>
							</a>
							<button class="btn btn-danger" @onclick="@(()=>Delete(prescriptionItem.Id))">
								<span class="oi oi-delete"></span>
							</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<PrescriptionItem>? PrescriptionItems;
	[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

	private bool userIsAdmin = false;
	private bool userIsStaff = false;
	private bool userIsUser = false;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		PrescriptionItems = await _client.GetFromJsonAsync<List<PrescriptionItem>>($"{Endpoints.PrescriptionItemsEndpoint}");
	
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userName = state.User?.Identity?.Name;
		if (state.User?.Identity?.IsAuthenticated ?? false)
		{
			if (userName.EndsWith("@admin.vitalmed.com", StringComparison.OrdinalIgnoreCase))
			{
				userIsAdmin = true;
			}
			else if (userName.EndsWith("@staff.vitalmed.com", StringComparison.OrdinalIgnoreCase))
			{
				userIsStaff = true;
			}
			else
			{
				userIsUser = true;
			}
		}
	}

	async Task Delete(int prescriptionItemId)
	{
		if (PrescriptionItems != null)
		{
			var prescriptionItem = PrescriptionItems.First(q => q.Id == prescriptionItemId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescriptionItem.PrescriptionItemID}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.PrescriptionItemsEndpoint}/{prescriptionItemId}");
				await OnInitializedAsync();
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#pItemsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#pItemsTable");
	}
}
